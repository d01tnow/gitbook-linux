
""-------------------------------- Plugins ------------------------------------------

" 插件管理
" 安装 vim-plug
" https://github.com/junegunn/vim-plug
" 安装插件命令 :PlugInstall
" 移除不需要的插件命令 :PlugClean
" 更新插件: PlugUpdate
" 更新自身: PlugUpgrade
" 列出所有插件:PlugStatus


if isdirectory(expand('$HOME/.vim/plugged')) 
call plug#begin('~/.vim/plugged')
" 其他插件
" 非常快的文件搜索插件 fzf
" 安装: git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
Plug 'junegunn/vim-easy-align'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-surround'
" gcc (普通模式), gc (可视模式), gcu(撤销上次注释), gcgc(撤销注释当前行和邻近的上下两行)
Plug 'tpope/vim-commentary'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
" colorscheme 管理插件
Plug 'flazz/vim-colorschemes'
" 安装完成后, cd ~/.vim/plugged/YouCompleteMe && ./install.py -all
"Plug 'Valloric/YouCompleteMe'
Plug 'Yggdroot/indentLine'
Plug 'plasticboy/vim-markdown'
Plug 'suan/vim-instant-markdown'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
" 所有插件需要在下面这行之前
call plug#end() " 必须

endif

" for Shougo/deoplete.nvim
let g:deoplete#enable_at_startup = 1

" vim 启用 powerline 效果, 需要安装 powerline fonts
" git clone https://github.com/powerline/fonts.git && sudo ./fonts/install.sh
"
set laststatus=2  " 总是显示状态栏
set t_Co=256  " 使用256色, 在配色方案(colorscheme)前设置
" shell 中S获取powerlin vim 路径:
" pip show powerline-status | awk '/Location/ {print $2 "/powerline/bindings/vim/"}'
set rtp+=/usr/lib/python2.7/site-packages/powerline/bindings/vim/


if has("win32")
    " 设置 Source Code Pro for Powerline 12号
    set guifont=Source\ Code\ Pro\ for\ Powerline:h12
else
    if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    " 设置 Source Code Pro for Powerline 12号
    set guifont=Source\ Code\ Pro\ for\ Powerline\ 12
endif

" 配色方案
set background=dark
"colorscheme gruvbox
colorscheme desert
"colorscheme molokai
"colorscheme phd

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""-------------------------------- 通用 ------------------------------------------
" set paste  " 粘贴模式, 粘贴时保持格式

" 不要使用 vi 的键盘模式, 使用 vim 自己的
set nocompatible

" 配置在保存时生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC
" 设置行号开关键, 便于用鼠标选择即拷贝时不带行号, 不带缩进线
:noremap <F2> <Esc>:set nu!<CR>:set relativenumber!<CR>:IndentLinesToggle<CR>
" 粘贴模式开关键
set pastetoggle=<F3>

" 启用鼠标模式. 鼠标选择内容复制到剪贴板. 但是启用行号时, 会把行号也选上.
" 如果要带行号, 用鼠标选
" 如果不要带行号, 使用 "*yny 复制 n 行或者可视模式下选择后 "*y
set mouse=v
" 默认使用选择缓存区寄存器 "*. 即 y,p 和系统选择缓冲器进行数据交换
" unnamedplus
if has('clipboard')
    if has('unnamedplus')  " When possible use + register for copy-paste
        set clipboard=unnamed,unnamedplus
    else         " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif
endif

" 安装插件后启用 类型插件
" filetype on  " 侦测文件类型
" filetype plugin on  " 载入文件类型插件
" filetype indent on  " 不同类型的文件的缩进不同
filetype plugin indent on  " 这个配置等同于上面3条配置

" GUI
if has('gui_running')
    set guioptions-=m  " 隐藏菜单
    set guioptions-=T  " 隐藏工具栏
    " 隐藏滚动条
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R

endif

" 界面
set cmdheight=2  " 设置命令行高度
" 状态栏显示信息
"set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\
set showcmd  " 状态栏显示当前执行的命令

"  编辑器
syntax enable "语法高亮
syntax on  " 配色方案语法高亮替代默认方案
set ruler  "  显示标尺
set cursorline " 高亮光标所在行
set showmatch  " 高亮匹配的括号
set hlsearch  " 高亮显示被搜索字符
set incsearch " 输入搜索内容时就显示搜索结果


set nu  " 打开行号
set relativenumber " 打开相对行号
set nowrap  "禁止折行
set autoindent  " 继承前一行的缩进
set smartindent  " 为 C 程序提供自动缩进
" 使用 :retab 命令重新处理 tab 和 空格
set tabstop=2  " 设置 tab 长度
set shiftwidth=2  " 设置 > 命令移动时的宽度
set expandtab  " 用空格替代 tab
set softtabstop=2  " 使用退格键时一次可以删除的空格数
set backspace=indent,eol,start  " 退格键可以跨越行
set whichwrap=h,l,b,s,<,>,[,]  " 跨行移动
set completeopt=longest,menu  " 设置智能补全
set wildmenu  " 自动补全命令时使用菜单式列表
set iskeyword+=@,#,$,%,-,_  " 带有这些符号的单词不要被换行分隔
set scrolloff=3  " 光标到顶部或底部保持3行距离

" encoding
set encoding=utf-8  " vim 内部使用的编码
set termencoding=utf-8  " 终端显示的编码
set fileencoding=utf-8 " 编辑文件的编码格式
set fileencodings=utf-8,ucs-bom,gb18030,gbk,cp936,gb2312  " 打开文件的编码列表

" 代码折叠
set foldenable  " 启用折叠
set foldmethod=syntax  " 使用语法高亮定义代码折叠
setlocal foldlevel=1  " 设置折叠层数
set foldlevelstart=99 " 打开文件时不折叠
" 使用空格来开关折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" 备份
set nobackup  " 修改时不备份

" map
" 默认的 mapleader="\"
let mapleader=";"
vmap <C-c> "+y
nmap <leader>tr :NERDTreeToggle<CR>

" 按 <leader>ev 打开配置文件
nmap <leader>ev :e $MYVIMRC<CR>
" 按 <leader>sv 重新加载配置文件
nmap <leader>sv :so $MYVIMRC<CR>
